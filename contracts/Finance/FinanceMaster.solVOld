// SPDX-License-Identifier: MIT

pragma solidity 0.6.12;

import "./helpers/Ownable.sol";
import "./helpers/SafeBEP20.sol";
import "./helpers/SafeMath.sol";
import "./helpers/TradeHelper.sol";
import "./helpers/IMasterChef.sol";


interface IHonorFactory {
    function getPair(address tokenA, address tokenB) external view returns (address pair);
}

contract FinanceMasterV1 is Ownable {

    using SafeMath for uint256;

    address public _busd;
    address public _wbnb;
    address public _honor;
    address public _hnrusd;
    address public _routerHonor;
    address public _router1;
    address public _router2;
    IHonorFactory public _factory;

    address public _pairBNBBUSD;
    address public _pairBUSDHONOR;
    address public _pairBNBHONOR;
    address public _pairHUSDHONOR;
    address public _pairBNBHUSD;
    address public _pairBUSDHUSD;

    mapping(address => uint256) public financeAdmins;

    constructor(address busd,address wbnb,address honor,address hnrusd,address factory,address router) public {
        _busd=busd;
        _wbnb=wbnb;
        _honor=honor;
        _hnrusd=hnrusd;
        _factory=IHonorFactory(factory);
        _routerHonor=router;
        _pairBNBBUSD=_factory.getPair(_wbnb, _busd);
        _pairBUSDHONOR=_factory.getPair(_busd, _honor);
        _pairBNBHONOR=_factory.getPair(_wbnb, _honor);
        _pairHUSDHONOR=_factory.getPair(_hnrusd, _honor);
        _pairBNBHUSD=_factory.getPair(_wbnb, _hnrusd);
        _pairBUSDHUSD=_factory.getPair(_busd, _hnrusd);
        _pairHUSDHONOR=_factory.getPair(_hnrusd,_honor);
       
    }
    receive() external payable {}
    
    function addFinanceAdmin(address admin) public onlyOwner {
        require(Address.isContract(admin)==true,"Only Contract");
        financeAdmins[admin]=100;
    }
    function deleteFinanceAdmin(address admin) public onlyOwner {
        require(Address.isContract(admin)==true,"Only Contract");
        financeAdmins[admin]=0;
    }


    function setRouters(address routerHonor,address router1,address router2) public onlyOwner {
        _routerHonor=routerHonor;
        _router1=router1;
        _router2=router2;
        setAllApprove();
    }

    function setAllApprove() public {
        IBEP20(_busd).approve(_routerHonor, uint256(-1));
        IBEP20(_hnrusd).approve(_routerHonor, uint256(-1));
        IBEP20(_wbnb).approve(_routerHonor, uint256(-1));
        IBEP20(_honor).approve(_routerHonor, uint256(-1));
        IBEP20(_busd).approve(_router1, uint256(-1));
        IBEP20(_hnrusd).approve(_router1, uint256(-1));
        IBEP20(_wbnb).approve(_router1, uint256(-1));
        IBEP20(_honor).approve(_router1, uint256(-1));
        IBEP20(_busd).approve(_router2, uint256(-1));
        IBEP20(_hnrusd).approve(_router2, uint256(-1));
        IBEP20(_wbnb).approve(_router2, uint256(-1));
        IBEP20(_honor).approve(_router2, uint256(-1));
    }

    function _removeLiquidity(address router,address tokenA,address tokenB,uint amount) private {
        IUniswapV2Router(router).removeLiquidity(tokenA, tokenB, amount, 0, 0, address(this), block.timestamp);
    }
    /*
    Deposit BUSD
    %30 WBNB Buy
    %30 Honor Buy
    %15 WBNB -%15 BUSD Liquidity
    %15 WBNB -%15 Honor Liquidity
    %25 BUSD -%25 Honor Liquidity

    Total %110 
    */
    function depositToken(address token,uint256 amount) public {
        SafeBEP20.safeTransferFrom(IBEP20(token),msg.sender,address(this),amount);
    }

    function recoverToken(address token,uint256 amount) public onlyOwner {
        SafeBEP20.safeTransfer(IBEP20(token), msg.sender, amount);
    }

    function buyAndAddLiquidty(address tokenRes,address tokenBuy,uint256 amount) public onlyOwner {

    }
    function depositBUSD(uint256 amount) public {
        SafeBEP20.safeTransferFrom(IBEP20(_busd), msg.sender, address(this), amount);
        
        uint256 buyAmount=amount.mul(3).div(10);
        
        _swap(_busd,_wbnb,buyAmount);

        uint256 liqAmount=IBEP20(_wbnb).balanceOf(address(this)).div(2);

        //WBNB Likiditelerini Ekle
        _addLiquidity(_routerHonor, _wbnb, _busd, liqAmount);
        liqAmount=IBEP20(_wbnb).balanceOf(address(this));
        _addLiquidity(_routerHonor, _wbnb, _honor, liqAmount);
        
        _swap(_busd,_honor,buyAmount);

        //BUSD Likiditesini Oluşturacağız 
        
        liqAmount=IBEP20(_busd).balanceOf(address(this));
        _addLiquidity(_routerHonor, _busd, _honor, liqAmount);

   }

    function _addLiquidity(address router,address tokenA,address tokenB,uint amountAMin) private {
        IUniswapV2Router(router).addLiquidity(tokenA, tokenB, amountAMin, uint256(-1), 0, 0, address(this), block.timestamp);
    }

  

   function _swap(address tokenIn,address tokenOut,uint256 amount) private {
        address  router=TradeHelper.checkAmountMin(_routerHonor,_router1,tokenIn,tokenOut,amount);
        router=TradeHelper.checkAmountMin(router, _router2, tokenIn, tokenOut, amount);

        address[] memory path;
        path = new address[](2);
        path[0] = tokenIn;
        path[1] = tokenOut;
        
        IUniswapV2Router(router).swapExactTokensForTokens(amount, 1, path, address(this), block.timestamp);
   }

   function _buyWBNB(address tokenIn,uint256 amount) private {
        address  router=TradeHelper.checkAmountMin(_routerHonor,_router1,tokenIn,_wbnb,amount);
        router=TradeHelper.checkAmountMin(router, _router2, tokenIn, _wbnb, amount);

        address[] memory path;
        path = new address[](2);
        path[0] = tokenIn;
        path[1] = _wbnb;

        IUniswapV2Router(router).swapTokensForExactETH(amount, 1, path, address(this), block.timestamp);
   }

    /*
    Deposit HNRUSD
    %30 WBNB Buy
    %30 Honor Buy
    %15 WBNB -%15 HNRUSD Liquidity
    %15 WBNB -%15 Honor Liquidity
    %25 BUSD -%25 Honor Liquidity

    Total %110 
    */
   function depositHNRUSD(uint256 amount) public {
        SafeBEP20.safeTransferFrom(IBEP20(_hnrusd), msg.sender, address(this), amount);
        
        uint256 buyAmount=amount.mul(3).div(10);
        _swap(_hnrusd,_wbnb,buyAmount);

        uint256 liqAmount=IBEP20(_wbnb).balanceOf(address(this)).div(2);

        //WBNB Likiditelerini Ekle
        _addLiquidity(_routerHonor, _wbnb, _hnrusd, liqAmount);
        liqAmount=IBEP20(_wbnb).balanceOf(address(this));
        _addLiquidity(_routerHonor, _wbnb, _honor, liqAmount);
        
        _swap(_hnrusd,_honor,buyAmount);

        //HNRUSD Likiditesini Oluşturacağız 
        
        liqAmount=IBEP20(_hnrusd).balanceOf(address(this));
        _addLiquidity(_routerHonor, _hnrusd, _honor, liqAmount);
   }

    /*
    Deposit HONOR
    %20 WBNB Buy
    %20 BUSD BUY
    %20 HUSD Buy
    %20 WBNB -%20 HONOR Liquidity
    %10 BUSD -%10 Honor Liquidity
    %10 HUSD -%10 Honor Liquidity
    %10 HUSD -%10 BUSD  Liquidity
    Total %100 
    */

   function depositHonor(uint256 amount) public {
        SafeBEP20.safeTransferFrom(IBEP20(_honor), msg.sender, address(this), amount);
        
        uint256 buyAmount=amount.mul(2).div(10);
        _swap(_honor,_wbnb,buyAmount);

        uint256 liqAmount=IBEP20(_wbnb).balanceOf(address(this));

        //WBNB Likiditelerini Ekle
        _addLiquidity(_routerHonor, _wbnb, _honor, liqAmount);
        
        _swap(_honor,_busd,buyAmount);

        //BUSD Likiditelerini Ekle
        liqAmount=IBEP20(_busd).balanceOf(address(this)).div(2);
        _addLiquidity(_routerHonor, _busd, _honor, liqAmount);
        
        _swap(_honor,_hnrusd,buyAmount);
        liqAmount=IBEP20(_busd).balanceOf(address(this));
        _addLiquidity(_routerHonor, _busd, _hnrusd, liqAmount);

        //HNRUSD Likiditesini Oluşturacağız 
        liqAmount=IBEP20(_hnrusd).balanceOf(address(this));
        _addLiquidity(_routerHonor, _hnrusd, _honor, liqAmount);
        
 
   }


   function widthdrawBUSD(uint256 amount) public returns(bool) {
        require(financeAdmins[msg.sender]>0,"Only Finance Admin");

        
        _removeLiquidity(_routerHonor, _busd, _honor, IBEP20(_pairBUSDHONOR).balanceOf(address(this)));
        _removeLiquidity(_routerHonor, _busd, _wbnb, IBEP20(_pairBNBBUSD).balanceOf(address(this)));
        _removeLiquidity(_routerHonor, _busd, _hnrusd, IBEP20(_pairBUSDHUSD).balanceOf(address(this)));

        uint256 balance=IBEP20(_busd).balanceOf(address(this));
        bool ret=false;
        if(balance>amount)
        {
            SafeBEP20.safeTransfer(IBEP20(_busd), msg.sender, amount);
            ret=true;
        }

        uint256 bal=IBEP20(_busd).balanceOf(address(this));
        _addLiquidity(_routerHonor, _busd, _honor, bal.div(3));
        
        bal=IBEP20(_busd).balanceOf(address(this));
        _addLiquidity(_routerHonor, _busd, _wbnb, bal.div(2));

        bal=IBEP20(_busd).balanceOf(address(this));
        _addLiquidity(_routerHonor, _busd, _hnrusd, bal);

        bal=IBEP20(_wbnb).balanceOf(address(this));
        if(bal>0)
        {
            _addLiquidity(_routerHonor, _wbnb, _honor, bal);
        }
        
        bal=IBEP20(_hnrusd).balanceOf(address(this));
        if(bal>0)
        {
            _addLiquidity(_routerHonor, _hnrusd, _honor, bal);
        }

        return ret;
   }

    function widthdrawHNRUSD(uint256 amount) public returns(bool) {
        require(financeAdmins[msg.sender]>0,"Only Finance Admin");

        _removeLiquidity(_routerHonor, _hnrusd, _honor, IBEP20(_pairHUSDHONOR).balanceOf(address(this)));
        _removeLiquidity(_routerHonor, _hnrusd, _wbnb, IBEP20(_pairBNBHUSD).balanceOf(address(this)));
        _removeLiquidity(_routerHonor, _busd, _hnrusd, IBEP20(_pairBUSDHUSD).balanceOf(address(this)));

        uint256 balance=IBEP20(_hnrusd).balanceOf(address(this));
        bool ret=false;
        if(balance>amount)
        {
            SafeBEP20.safeTransfer(IBEP20(_hnrusd), msg.sender, amount);
            ret=true;
        }

        uint256 bal=IBEP20(_hnrusd).balanceOf(address(this));
        _addLiquidity(_routerHonor, _hnrusd, _honor, bal.div(3));
        
        bal=IBEP20(_hnrusd).balanceOf(address(this));
        _addLiquidity(_routerHonor, _hnrusd, _wbnb, bal.div(2));

        bal=IBEP20(_hnrusd).balanceOf(address(this));
        _addLiquidity(_routerHonor, _hnrusd, _busd, bal);

        bal=IBEP20(_wbnb).balanceOf(address(this));
        if(bal>0)
        {
            _addLiquidity(_routerHonor, _wbnb, _honor, bal);

        }
        
        bal=IBEP20(_busd).balanceOf(address(this));
        if(bal>0)
        {
            _addLiquidity(_routerHonor, _busd, _honor, bal);
        }

        return ret;
   }

    function widthdrawHonor(uint256 amount) public returns(bool) {
        require(financeAdmins[msg.sender]>0,"Only Finance Admin");
  
        uint256 balance=IBEP20(_honor).balanceOf(address(this));
        if(balance>amount)
        {
            SafeBEP20.safeTransfer(IBEP20(_honor), msg.sender, amount);
            return true;
        }
        return false;
    }


   function depositWBNB(uint256 amount) public {
    SafeBEP20.safeTransferFrom(IBEP20(_wbnb), msg.sender, address(this), amount);
    _addLiquidity(_routerHonor, _wbnb, _honor, amount);

   }

   function widthdrawBNB(uint256 amount) public returns(bool) {
        require(financeAdmins[msg.sender]>0,"Only Finance Admin");

        _removeLiquidity(_routerHonor, _wbnb, _honor, IBEP20(_pairBNBHONOR).balanceOf(address(this)));
        _removeLiquidity(_routerHonor, _wbnb, _busd, IBEP20(_pairBNBBUSD).balanceOf(address(this)));
        _removeLiquidity(_routerHonor, _wbnb, _hnrusd, IBEP20(_pairBNBHUSD).balanceOf(address(this)));

        uint256 balance=IBEP20(_wbnb).balanceOf(address(this));
        bool ret=false;
        if(balance>amount)
        {
            SafeBEP20.safeTransfer(IBEP20(_wbnb), msg.sender, amount);
            ret=true;
        }

        uint256 bal=IBEP20(_wbnb).balanceOf(address(this));
        _addLiquidity(_routerHonor, _wbnb, _busd, bal.div(3));
        
        bal=IBEP20(_wbnb).balanceOf(address(this));
        _addLiquidity(_routerHonor, _wbnb, _hnrusd, bal.div(2));

        bal=IBEP20(_wbnb).balanceOf(address(this));
        _addLiquidity(_routerHonor, _wbnb, _honor, bal);

        bal=IBEP20(_busd).balanceOf(address(this));
        if(bal>0)
        {
            _addLiquidity(_routerHonor, _busd, _honor, bal);

        }
        
        bal=IBEP20(_hnrusd).balanceOf(address(this));
        if(bal>0)
        {
            _addLiquidity(_routerHonor, _hnrusd, _honor, bal);

        }


        return ret;
   }
}
